#!/bin/sh
#
# Copyright (c) 2010, Sebastian Siebert (freespacer@gmx.de)
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Changelog:
#
# Version 1.0 - inital development
#
# /etc/init.d/fglrxrebuild
#
### BEGIN INIT INFO
# Provides:          boot.fglrxrebuild
# Required-Start:    $local_fs
# Should-Start:
# Required-Stop:     $null
# Should-Stop:
# Default-Start:     B
# Default-Stop:
# Short-Description: Automatically rebuild the fglrx kernel module
# Description:       A service to build a fglrx kernel module for new kernels
### END INIT INFO

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
        echo "Check for rebuild the fglrx kernel module if necessary ..."
        FGLRX_KERNEL_MODULE="/lib/modules/`uname -r`/extra/fglrx.ko"

        if [ ! -f "${FGLRX_KERNEL_MODULE}" ]; then
            echo "   ${FGLRX_KERNEL_MODULE} does not exist. I build it NOW. Please wait ..."
            /usr/bin/fglrx-kernel-build.sh >/var/log/fglrx-build.log 2>&1
        else
            echo "   The fglrx kernel module was already builded."
        fi

        echo "Check for the fglrx kernel module is running..."
        if [ -z "`lsmod | grep fglrx`" ]; then
            echo "   The fglrx kernel module is not loaded! Try it to modeprobe now ..."
            modprobe --first-time fglrx
            if [ -n "`lsmod | grep fglrx`" ]; then
                echo "   The fglrx kernel module was successfully loaded."
                rc_failed 0
            else
                echo "   FATAL: The fglrx kernel module could not loaded!"
                rc_failed 1
            fi
        else
            echo "   The fglrx kernel module is loaded."
            rc_failed 0
        fi


        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        # we ignored this commands
        ;;
    status)
        echo "Checking for the fglrx kernel module is running ..."
        FGLRX_KERNEL_MODULE="/lib/modules/`uname -r`/extra/fglrx.ko"

        if [ ! -f "${FGLRX_KERNEL_MODULE}" ]; then
            echo "   FATAL: The fglrx kernel module was not builded."
            rc_failed 1
        else
            if [ -z "`lsmod | grep fglrx`" ]; then
                echo "   FATAL: The fglrx kernel module is not loaded!"
                rc_failed 1
            else
                rc_failed 0
            fi
        fi
        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|status}"
        exit 1
        ;;
esac
rc_exit
