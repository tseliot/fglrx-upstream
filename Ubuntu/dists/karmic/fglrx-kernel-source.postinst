#!/bin/sh
# Copyright (C) 2002-2005 Flavio Stanchina
# Copyright (C) 2005-2006 Aric Cyr
# Copyright (C) 2007-2009 Mario Limonciello


NAME=fglrx
PACKAGE_NAME=$NAME-kernel-source

CVERSION=`dpkg-query -W -f='${Version}' $PACKAGE_NAME | awk -F "-" '{print $1}' | cut -d\: -f2`
BLACKLIST_FILE=/etc/modprobe.d/blacklist-$NAME.conf
KERNELS=$(ls /lib/modules/)
CURRENT_KERNEL=$(uname -r)

#DEBHELPER#

case "$1" in
	configure)
		#We never want to keep an older version side by side to prevent conflicts
		if [ -e "/var/lib/dkms/$NAME/$VERSION" ]; then
			echo "Removing old $NAME-$VERSION DKMS files..."
			dkms remove -m $NAME -v $VERSION --all
		fi

		#Load new files, either by source package or by tarball
		echo "Loading new $NAME-$CVERSION DKMS files..."
		if [ -f "/usr/src/$NAME-$CVERSION.dkms.tar.gz" ]; then
			dkms ldtarball --archive "/usr/src/$NAME-$CVERSION.dkms.tar.gz"
		else
			dkms add -m $NAME -v $CVERSION > /dev/null
		fi

		if [ -x /usr/bin/dpkg ]; then
			ARCH=$(dpkg --print-architecture)
			case $ARCH in
				amd64)
					ARCH="-a x86_64"
					;;
				lpia)
					ARCH="-a i686"
					;;
				i386)
					ARCH="-a i686"
					;;
				*)
					echo "WARNING: unsupported arch: $ARCH"
				ARCH="-a $ARCH"
					;;
			esac
		fi

		# On 1st installation, let us look for a directory
		# in /lib/modules which matches `uname -r`. If none
		# is found it is possible that buildd is being used
		# and that uname -r is giving us the name of the
		# kernel used by the buildd machine.
		#
		# If this is the case we try to build the kernel
		# module for each kernel which has a directory in
		# /lib/modules. Furthermore we will have to tell
		# DKMS which architecture it should build the module
		# for (e.g. if the buildd machine is using a
		# 2.6.24-23-xen 64bit kernel).
		#
		# NOTE: if the headers are not installed then the
		#	   module won't be built, as usual
		if [ -z "$2" ]; then
			echo "First Installation: checking all kernels..."
			for KERNEL in $KERNELS; do
				if [ ${KERNEL} = ${CURRENT_KERNEL} ]; then
					# Kernel found
					KERNELS=$CURRENT_KERNEL
					break
				fi
			done
		else
			KERNELS=$CURRENT_KERNEL
		fi

		for KERNEL in $KERNELS; do
			dkms_status=`dkms status -m $NAME -v $CVERSION -k $KERNEL $ARCH`
			if [ `echo $dkms_status | grep -c ": built"` -eq 0 ]; then
				echo "Building initial module for $KERNEL, architecture $ARCH"
				dkms build -m $NAME -v $CVERSION -k $KERNEL $ARCH > /dev/null
				echo "Done."
			fi
			if [ `echo $dkms_status | grep -c ": installed"` -eq 0 ]; then
				dkms install -m $NAME -v $CVERSION -k $KERNEL $ARCH
			fi
		done
		if [ ! -f $BLACKLIST_FILE ]; then
			cat > $BLACKLIST_FILE <<EOF
# Warning: This file is autogenerated by fglrx-kernel-source. All changes to this file will be lost.
blacklist radeon
EOF
			#Update the initramfs as radeon might get loaded from it normally
			/usr/sbin/update-initramfs -u
		fi

	;;
esac


